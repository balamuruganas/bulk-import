$database = "master"
$Language ="en"

$itemList = Get-ChildItem "master:\sitecore\content\Marketplace-US\Home\App Products" -Recurse | Where-Object { $_.TemplateID -eq "{15F0049D-0406-40DE-946C-2E28425B250F}" }

function Get-FieldValues
{
    Param([Sitecore.Data.Items.Item] $Item, [System.String] $FieldName, [System.String] $ValueToMatch)
    Process
    {
        Write-Host $FieldName
        $field = $item.Fields[$fieldName]
        $fieldTypes = $("multilist","droplist","treelist", "droplink")
        if(!($fieldTypes -contains $field.TypeKey))
        {
            $output = $ValueToMatch;
        }
        else
        {
            $query = $field.Source;
            if($query.StartsWith("query"))
            {
                $list = $item.Axes.SelectItems($query.TrimStart("query:"))
            }
            $results = @()
            $values = $ValueToMatch.Split("{_}")
            $values |  ForEach-Object { 
                $this = $_;
                $MatchingItem = $list | Where-Object { $_.Name -match $this.Trim() } | Select -First 1
                if($MatchingItem)
                {            
                    $results += $MatchingItem.ID.ToString()
                }
            }
            $output = $($results -join "|");
        }
    }
    End
    {
        return $output
    }
}


#Upload the file on the Server in temporary folder
#It will create the folder if it is not found
$dataFolder = [Sitecore.Configuration.Settings]::DataFolder
$tempFolder = $dataFolder + "\temp\upload"
$filePath = Receive-File -Path $tempFolder -overwrite

if($filePath -eq "cancel"){
    exit
}

$resultSet =  Import-Csv $filePath

$rowsCount = ( $resultSet | Measure-Object ).Count;

    if($rowsCount -le 0){
        Remove-Item $filePath
        exit
    }
    
    Write-Log "Bulk Update Started!";
    
    foreach ( $row in $resultSet ) {
        $item = $itemList | Where-Object { $_.Name -match $row.Name} | Select -First 1 
        Write-Host $item.Name
        if ($item){
         $fields = $item | Get-ItemField
         Write-Host $fields
         foreach($field in $fields){
             if($row -match $field) {
                 $value = Get-FieldValues -Item $item -FieldName $field -ValueToMatch $row.$field
                 $item.Editing.BeginEdit()
                 $item.Fields[$field].Value=$value;
                 $item.Editing.EndEdit();
                 Write-Host "ItemName: ($($item.Name)), FieldName:($($field)) FieldValue:($($value)) -Updated"
             }
             
         }
        }
        else {
            $logThis =  "Couldn't find: " + $row.ItemPath + " with Language Version: " + $row.Language 
            $logThis
            Write-Log $logThis
        }
    }
    
    $logInfo = "Bulk Update is Completed!";
    $logInfo
    Write-Log $logInfo

Remove-Item $filePath
